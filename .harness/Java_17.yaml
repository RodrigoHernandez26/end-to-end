pipeline:
  name: Java 17
  identifier: Java_17
  projectIdentifier: default_project
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: account.Github_OAuth_1715105217041
        repoName: <+input>
        build: <+input>
        depth: 1
  stages:
    - stage:
        name: Build
        identifier: Build
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: get project info
                  identifier: get_project_info
                  spec:
                    connectorRef: AWS_Personal
                    image: 295439051676.dkr.ecr.sa-east-1.amazonaws.com/build-images:jdk17
                    shell: Sh
                    command: |-
                      projectName=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.name}' --non-recursive exec:exec)
                      projectVersion=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
                    outputVariables:
                      - name: projectName
                      - name: projectVersion
                    imagePullPolicy: Always
              - step:
                  type: RestoreCacheS3
                  name: Restore Cache
                  identifier: RestoreCacheS3_1
                  spec:
                    connectorRef: AWS_Personal
                    region: <+variable.AWS_Region>
                    bucket: <+stage.variables.projectName>-artifactory
                    key: cache-{{ checksum "pom.xml" }}
                    archiveFormat: Tar
              - step:
                  type: Run
                  name: build
                  identifier: build
                  spec:
                    connectorRef: AWS_Personal
                    image: 295439051676.dkr.ecr.sa-east-1.amazonaws.com/build-images:jdk17
                    shell: Sh
                    command: mvn clean package dependency:copy-dependencies
                    imagePullPolicy: Always
              - step:
                  type: SaveCacheS3
                  name: Save Cache
                  identifier: Save_Cache
                  spec:
                    connectorRef: AWS_Personal
                    region: <+variable.AWS_Region>
                    bucket: <+stage.variables.projectName>-artifactory
                    key: cache-{{ checksum "pom.xml" }}
                    sourcePaths:
                      - /root/.m2
                    archiveFormat: Tar
              - step:
                  type: Run
                  name: run test
                  identifier: run_test
                  spec:
                    connectorRef: AWS_Personal
                    image: 295439051676.dkr.ecr.sa-east-1.amazonaws.com/build-images:jdk17
                    shell: Sh
                    command: mvn test
                    reports:
                      type: JUnit
                      spec:
                        paths:
                          - target/surefire-reports/*.xml
              - step:
                  type: S3Upload
                  name: upload JAR to S3
                  identifier: upload_JAR_to_S3
                  spec:
                    connectorRef: AWS_Personal
                    region: <+variable.AWS_Region>
                    bucket: <+stage.variables.projectName>-artifactory
                    sourcePath: target/<+stage.variables.projectName>-<+stage.variables.projectVersion>.jar
                    target: /
              - step:
                  type: BuildAndPushECR
                  name: Build and Push to ECR
                  identifier: BuildAndPushECR_1
                  spec:
                    connectorRef: AWS_Personal
                    region: <+variable.AWS_Region>
                    account: <+secrets.getValue("AWSAccountID")>
                    imageName: <+stage.variables.projectName>
                    tags:
                      - <+stage.variables.projectVersion>
          sharedPaths:
            - /root/.m2
          caching:
            enabled: false
            paths:
              - /root/.m2
        variables:
          - name: projectName
            type: String
            description: ""
            required: false
            value: <+input>
          - name: projectVersion
            type: String
            description: ""
            required: false
            value: <+input>
    - stage:
        name: deployprod
        identifier: deployprod
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: prodservice
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  manifests:
                    - manifest:
                        identifier: mymanifest
                        type: K8sManifest
                        spec:
                          store:
                            type: Github
                            spec:
                              repoName: <+input>
                              branch: <+input>
                              paths:
                                - <+input>
                          valuesPaths:
                            - <+input>
          environment:
            environmentRef: prod
            deployToAll: false
            infrastructureDefinitions:
              - identifier: prodinfra
                inputs:
                  identifier: prodinfra
                  type: KubernetesDirect
                  spec:
                    namespace: <+input>
          execution:
            steps:
              - step:
                  name: Rollout Deployment
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
  allowStageExecutions: false
